{"version":3,"sources":["webpack:///./src/actions/index.ts","webpack:///./src/types/actionTypes.ts","webpack:///./src/polyfills.ts","webpack:///./src/index.tsx","webpack:///./src/App.tsx","webpack:///./src/components/Leaflet/index.ts","webpack:///./src/components/Leaflet/Leaflet.tsx","webpack:///./src/components/FiltersNavbar/index.ts","webpack:///./src/components/FiltersNavbar/FiltersNavbar.tsx","webpack:///./src/store.ts","webpack:///./src/reducers/rootReducer.ts","webpack:///./src/reducers/leafletsReducer.ts"],"names":["fetchLeaflets","req","refresh","dispatch","type","ActionType","FETCH_LEAFLETS_PENDING","loading","get","baseUrl","params","offset","limit","name","excludeExpired","retailerId","maxDistance","sort","then","result","responseData","data","seen","Set","error","retailers","leaflets","forEach","item","push","id","retailer","filter","el","duplicate","has","add","FETCH_LEAFLETS_SUCCESS","payload","catch","console","FETCH_LEAFLETS_ERROR","filterLeaflets","filters","nameFilter","toUpperCase","retailerIdFilter","maxDistanceFilter","filteredLeaflets","indexOf","item3","item4","distance","slice","Date","log","d","setUTCSeconds","expTimestamp","getTime","FILTER_LEAFLETS","sortLeaflets","sortBy","activeSort","split","a","b","priority","join","SORT_LEAFLETS","render","Provider","store","document","getElementById","useDispatch","useSelector","state","leafletsReducer","useEffect","listItems","map","key","toString","xs","sm","md","xl","default","props","timestamp","className","Img","variant","src","images","lg","Item","toLocaleString","checkOrder","listRetailers","active","onClick","evt","as","sticky","bg","expand","Toggle","Collapse","Group","placeholder","onChange","target","value","title","Label","Control","required","parseInt","Check","checked","label","Store","createStore","applyMiddleware","RootReducer","combineReducers","initialState","action","response"],"mappings":"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","file":"js\\app.03c5e2dee06dad6340e1.min.js","sourcesContent":["import { Dispatch } from \"redux\"\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { ActionType, ApiDispatchTypes } from \"../types/actionTypes\"\r\nimport { LeafletsRequest, LeafletsResponse, LeafletItem, Retailer } from \"../types/dataTypes\"\r\nconst baseUrl = \"https://pq-leaflets.herokuapp.com\"\r\n\r\n\r\nexport const fetchLeaflets = (req: LeafletsRequest, refresh: boolean) => (dispatch: Dispatch<ApiDispatchTypes>) => {\r\n  dispatch({\r\n    type: ActionType.FETCH_LEAFLETS_PENDING,\r\n    loading: true\r\n  });\r\n\r\n\r\n  axios.get(`${baseUrl}/api/leaflets/filter`, {\r\n    params: {\r\n      offset: req.offset,\r\n      limit: req.limit,\r\n      name: req.name,\r\n      excludeExpired: req.excludeExpired,\r\n      retailerId: req.retailerId,\r\n      maxDistance: req.maxDistance,\r\n      sort: req.sort\r\n    }\r\n  }).then((result: AxiosResponse<LeafletsResponse>) => {\r\n    const responseData = result.data;\r\n    const seen = new Set();\r\n\r\n    if (responseData.data.error) {\r\n      throw (\"error\");\r\n    }\r\n    //Crea un array di retailers\r\n    let retailers: Array<Retailer> = [];\r\n\r\n    responseData.data.leaflets.forEach(item => {\r\n      retailers.push({ id: item.retailer.id, name: item.retailer.name });\r\n    });\r\n\r\n    retailers = retailers.filter(el => {\r\n      const duplicate = seen.has(el.id);\r\n      seen.add(el.id);\r\n      return !duplicate;\r\n    });\r\n\r\n    dispatch({\r\n      type: ActionType.FETCH_LEAFLETS_SUCCESS,\r\n      loading: false,\r\n      refresh: refresh,\r\n      retailers: retailers,\r\n      payload: responseData\r\n    });\r\n  }).catch((error) => {\r\n    console.error(error);\r\n    dispatch({\r\n      type: ActionType.FETCH_LEAFLETS_ERROR,\r\n      loading: false,\r\n      error: error\r\n    });\r\n  });\r\n};\r\n\r\n\r\n\r\nexport const filterLeaflets = (leaflets: Array<LeafletItem>, filters: LeafletsRequest) => (dispatch: Dispatch<ApiDispatchTypes>) => {\r\n  // Nota: la richiesta API è case sensitive, per comodità rendo il filtro locale non case sensitive\r\n  let nameFilter = filters.name.toUpperCase();\r\n  let retailerIdFilter = filters.retailerId;\r\n  let maxDistanceFilter = filters.maxDistance | 0;\r\n  // Impedisce ad offset e limit di andare sotto 0\r\n  if (filters.offset <= 0) { filters.offset = 0 }\r\n  if (filters.limit <= 0) { filters.limit = 0 }\r\n\r\n\r\n  let filteredLeaflets = leaflets.filter(item => {\r\n    return ((item.name.toUpperCase().indexOf(nameFilter) >= 0) || (item.retailer.name.toUpperCase().indexOf(nameFilter) >= 0))\r\n  }).filter(item3 => {\r\n    return (retailerIdFilter != \"\" ? item3.retailer.id === retailerIdFilter : true)\r\n  }).filter(item4 => {\r\n    return (maxDistanceFilter != 0 ? item4.retailer.distance <= maxDistanceFilter : true)\r\n  }).slice(filters.offset, filters.limit);\r\n\r\n  if (filters.excludeExpired == 1) {\r\n    const today = new Date();\r\n    console.log(\"filtering expired\")\r\n    filteredLeaflets = filteredLeaflets.filter(item => {\r\n      let d = new Date(0);\r\n      d.setUTCSeconds(item.expTimestamp);\r\n      return d.getTime() > today.getTime()\r\n    })\r\n  }\r\n  console.log(filteredLeaflets);\r\n  console.log(filters);\r\n  dispatch({\r\n    type: ActionType.FILTER_LEAFLETS,\r\n    filters: filters,\r\n    payload: filteredLeaflets\r\n  })\r\n};\r\n\r\n\r\nexport const sortLeaflets = (leaflets: Array<LeafletItem>, sortBy: string, filters: LeafletsRequest) => (dispatch: Dispatch<ApiDispatchTypes>) => {\r\n  let activeSort = filters.sort.split(',');\r\n  switch (sortBy) {\r\n    case \"priority\":\r\n      activeSort[0] = \"priority\";\r\n      break;\r\n    case \"-priority\":\r\n      activeSort[0] = \"-priority\";\r\n      break;\r\n    case \"expTimestamp\":\r\n      activeSort[1] = \"expTimestamp\";\r\n      break;\r\n    case \"-expTimestamp\":\r\n      activeSort[1] = \"-expTimestamp\";\r\n      break;\r\n    case \"distance\":\r\n      activeSort[2] = \"distance\";\r\n      break;\r\n    case \"-distance\":\r\n      activeSort[2] = \"-distance\";\r\n      break;\r\n    case \"retailerName\":\r\n      activeSort[3] = \"retailerName\";\r\n      break;\r\n    case \"-retailerName\":\r\n      activeSort[3] = \"-retailerName\";\r\n      break;\r\n    case \"leafletName\":\r\n      activeSort[4] = \"leafletName\";\r\n      break;\r\n    case \"-leafletName\":\r\n      activeSort[4] = \"-leafletName\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  console.log(activeSort);\r\n  /*\r\n  leaflets.sort((obj1: LeafletItem, obj2: LeafletItem) => {\r\n    if (activeSort[0] === 'priority') {\r\n\r\n      if (obj1.retailer.priority < obj2.retailer.priority) {\r\n        return -1;\r\n      }\r\n      if (obj1.retailer.priority > obj2.retailer.priority) {\r\n        return 1;\r\n      }\r\n    }\r\n    if (activeSort[0] === \"-priority\") {\r\n\r\n      if (obj1.retailer.priority > obj2.retailer.priority) {\r\n        return -1;\r\n      }\r\n      if (obj1.retailer.priority < obj2.retailer.priority) {\r\n        return 1;\r\n      }\r\n    }\r\n\r\n    return obj1.name.localeCompare(obj2.name);\r\n  });\r\n*/\r\n\r\n\r\n\r\n\r\n  if (activeSort[0] == \"priority\") {\r\n    console.log(\"sort by priority\");\r\n    leaflets.sort((a, b) => (a.retailer.priority - b.retailer.priority));\r\n  }\r\n  if (activeSort[0] == \"-priority\") {\r\n    console.log(\"sort by -priority\");\r\n    leaflets.sort((a, b) => (b.retailer.priority - b.retailer.priority));\r\n  }\r\n  /*\r\n  if (activeSort[0] == \"-priority\") {\r\n    console.log(\"sort by -priority\");\r\n    leaflets.sort((a, b) => (b.retailer.priority - a.retailer.priority ? -1 : 1));\r\n    console.log(leaflets);\r\n \r\n  }*/\r\n  /*\r\nif (activeSort[1] == \"expTimestamp\") {\r\n  leaflets.sort((a, b) => (a.expTimestamp - b.expTimestamp));\r\n}\r\nif (activeSort[1] == \"-expTimestamp\") {\r\n  leaflets.sort((a, b) => (b.expTimestamp - a.expTimestamp));\r\n}*/\r\n  /*\r\n    if (activeSort[2] == \"distance\") {\r\n      leaflets.sort((a, b) => (a.retailer.distance < b.retailer.distance ? -1 : 1));\r\n    }\r\n    if (activeSort[2] == \"-distance\") {\r\n      leaflets.sort((a, b) => (a.retailer.distance > b.retailer.distance ? -1 : 1));\r\n    }*/\r\n  if (activeSort[3] == \"retailerName\") {\r\n    leaflets.sort((a, b) => (a.retailer.name < b.retailer.name ? -1 : 1));\r\n  }\r\n  if (activeSort[3] === \"-retailerName\") {\r\n    leaflets.sort((a, b) => (a.retailer.name > b.retailer.name ? -1 : 1));\r\n  }\r\n  if (activeSort[4] == \"leafletName\") {\r\n    leaflets.sort((a, b) => (a.name < b.name ? -1 : 1));\r\n  }\r\n  if (activeSort[4] == \"-leafletName\") {\r\n    leaflets.sort((a, b) => (a.name > b.name ? -1 : 1));\r\n  }\r\n  //desc arrayOfObjects.sort((a, b) => (a.propertyToSortBy > b.propertyToSortBy ? -1 : 1));\r\n\r\n  console.log(leaflets);\r\n  console.log(activeSort.join(\",\"));\r\n\r\n\r\n  dispatch({\r\n    type: ActionType.SORT_LEAFLETS,\r\n    filters: {\r\n      ...filters, sort: activeSort.join(\",\")\r\n    },\r\n    payload: leaflets\r\n  })\r\n};\r\n","\r\nimport { LeafletsResponse, LeafletsRequest, LeafletItem, Retailer } from \"./dataTypes\";\r\nexport enum ActionType {\r\n    FETCH_LEAFLETS_PENDING = \"fetch_leaflets_pending\",\r\n    FETCH_LEAFLETS_SUCCESS = \"fetch_leaflets_success\",\r\n    FETCH_LEAFLETS_ERROR = \"fetch_leaflets_error\",\r\n    FILTER_LEAFLETS = \"filter_Leaflets\",\r\n    FILTER_LEAFLETS_BY_NAME = \"filter_leaflets_by_name\",\r\n    FILTER_LEAFLETS_BY_EXPIRED = \"filter_leaflets_by_expired\",\r\n    FILTER_LEAFLETS_BY_RETAILER_ID = \"filter_leaflets_by_retailer_id\",\r\n    FILTER_LEAFLETS_BY_OFFSET_AND_LIMIT = \"filter_leaflets_by_offset_and_limit\",\r\n    FILTER_LEAFLETS_BY_DISTANCE = \"filter_leaflets_by_distance\",\r\n    SORT_LEAFLETS = \"sort_leaflets\"\r\n\r\n}\r\n\r\nexport interface InitialState {\r\n    loading: boolean,\r\n    leaflets: Array<LeafletItem>,\r\n    filteredLeaflets: Array<LeafletItem>,\r\n    retailers: Array<Retailer>,\r\n    response?: LeafletsResponse,\r\n    error?: string,\r\n    filters: LeafletsRequest\r\n}\r\ninterface FetchLeafletsPendingAction {\r\n    type: ActionType.FETCH_LEAFLETS_PENDING,\r\n    loading: boolean\r\n}\r\n\r\ninterface FetchLeafletsSuccessAction {\r\n    type: ActionType.FETCH_LEAFLETS_SUCCESS,\r\n    payload: LeafletsResponse,\r\n    retailers: Array<Retailer>,\r\n    loading: boolean,\r\n    refresh: boolean,\r\n}\r\n\r\ninterface FetchLeafletsErrorAction {\r\n    type: ActionType.FETCH_LEAFLETS_ERROR,\r\n    error: string,\r\n    loading: boolean\r\n}\r\ninterface FilterLeafletsAction {\r\n    type: ActionType.FILTER_LEAFLETS,\r\n    filters: LeafletsRequest,\r\n    payload: Array<LeafletItem>\r\n}\r\n\r\ninterface SortLeaflets {\r\n    type: ActionType.SORT_LEAFLETS,\r\n    filters: LeafletsRequest,\r\n    payload: Array<LeafletItem>\r\n}\r\n\r\n\r\nexport type ApiDispatchTypes = FetchLeafletsPendingAction | FetchLeafletsSuccessAction | FetchLeafletsErrorAction | FilterLeafletsAction | SortLeaflets;","/**\n * Import polyfills for Webpack config entry point.\n * @packageDocumentation\n */\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './scss/style.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"./store\";\r\nimport { fetchLeaflets } from \"./actions\";\r\nimport { LeafletItem } from \"./types/dataTypes\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Leaflet from './components/Leaflet';\r\nimport FiltersNavbar from './components/FiltersNavbar';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const filters = useSelector((state: RootState) => state.leafletsReducer.filters);\r\n  const leaflets = useSelector((state: RootState) => state.leafletsReducer.filteredLeaflets);\r\n  useEffect(() => {\r\n    dispatch(fetchLeaflets(filters, false))\r\n\r\n  }, []);\r\n\r\n  const listItems = leaflets.map((item: LeafletItem) =>\r\n    <Col key={item.id.toString()} xs={12} sm={6} md={6} xl={3}>\r\n      <Leaflet {...item}></Leaflet>\r\n    </Col>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <FiltersNavbar></FiltersNavbar>\r\n      <Container>\r\n        <Row>\r\n          {listItems}\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export { default } from './Leaflet';\n","import React from 'react';\nimport './Leaflet.scss';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nimport { LeafletItem } from '../../types/dataTypes'\n\nconst Leaflet = (props: LeafletItem) => {\n    const convertTimestamp = (timestamp: number) => {\n        let d = new Date(0);\n        d.setUTCSeconds(timestamp);\n        return d.toLocaleString();\n    }\n\n    return (\n        <Card className=\"layout\">\n            <Card.Img variant=\"top\" src={props.retailer.images.lg} />\n            <ListGroup>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Name:</span>\n                    {props.name}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Retailer:</span>\n                    {props.retailer.name}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Distance:</span>\n                    {props.retailer.distance}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Expiration:</span>\n                    {convertTimestamp(props.expTimestamp)}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Priority:</span>\n                    {props.retailer.priority}\n                </ListGroup.Item>\n            </ListGroup>\n        </Card>\n    );\n}\n\nexport default Leaflet;\n","export { default } from './FiltersNavbar';\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Form from 'react-bootstrap/Form';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Container from 'react-bootstrap/Container';\n\nimport Button from 'react-bootstrap/Button';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RootState } from '../../store';\nimport { fetchLeaflets, filterLeaflets, sortLeaflets } from \"../../actions\";\n\n\n\nimport './FiltersNavbar.scss';\nimport { Retailer } from '@src/types/dataTypes';\n\n\nconst FiltersNavbar = () => {\n\n\n  const dispatch = useDispatch();\n  const filters = useSelector((state: RootState) => state.leafletsReducer.filters);\n\n  const leaflets = useSelector((state: RootState) => state.leafletsReducer.leaflets);\n  const retailers = useSelector((state: RootState) => state.leafletsReducer.retailers);\n\n  // Initialize double slider\n\n\n  const getRetailerNameFromId = (id: string) => {\n    return retailers.filter(item => {\n      return (item.id == id)\n    })[0].name;\n  };\n  const checkOrder = (name: string) => {\n    return filters.sort.indexOf(name)\n  };\n\n  filters.sort.indexOf(\"-priority\") !== -1\n  const listRetailers = retailers.map((item: Retailer) =>\n    <NavDropdown.Item\n      key={item.id}\n      active={item.id == filters.retailerId}\n      onClick={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, retailerId: item.id }))}\n      as=\"li\" >\n      {item.name}\n    </NavDropdown.Item >\n  );\n  return (\n    <Navbar sticky='top' bg='light' expand='lg'>\n      <Container>\n        <Navbar.Toggle aria-controls='basic-navbar-nav' />\n        <Navbar.Collapse id='basic-navbar-nav'>\n          <Nav className='m-auto'>\n            <Nav.Item>\n              <Form.Group>\n                <FormControl\n                  placeholder='Search name or retailer'\n                  aria-label='Search'\n                  onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, name: evt.target.value }))}\n                />\n              </Form.Group>\n            </Nav.Item>\n            <NavDropdown title='Sort by' id='basic-nav-dropdown'>\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-priority\") !== -1 ? \"priority\" : \"-priority\", filters))} >\n                <span className=\"mr-3\">{checkOrder(\"-priority\") !== -1 ? \"▼\" : \"▲\"}</span>\n                Priority\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-expTimestamp\") !== -1 ? \"expTimestamp\" : \"-expTimestamp\", filters))} >\n                <span className=\"pr-3\">{checkOrder(\"-expTimestamp\") !== -1 ? \"▼\" : \"▲\"}</span>\n                ExpTimestamp\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-distance\") !== -1 ? \"distance\" : \"-distance\", filters))} >\n                <span className=\"pr-3\">{checkOrder(\"-distance\") !== -1 ? \"▼\" : \"▲\"}</span>\n                Distance\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-retailerName\") !== -1 ? \"retailerName\" : \"-retailerName\", filters))} >\n                <span className=\"pr-3\">{checkOrder(\"-retailerName\") !== -1 ? \"▼\" : \"▲\"}</span>\n                Retailer name\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-leafletName\") !== -1 ? \"leafletName\" : \"-leafletName\", filters))} >\n                <span className=\"pr-3\">{checkOrder(\"-leafletName\") !== -1 ? \"▼\" : \"▲\"}</span>\n                Leaflet name\n              </NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown title='Set offset and limit' id='basic-nav-dropdown'>\n              <Nav.Item className=\"p-2\">\n                <Form>\n                  <Form.Group>\n                    <Form.Label>Offset:</Form.Label>\n                    <Form.Control\n                      required\n                      name=\"offset\"\n                      type=\"number\"\n                      value={filters.offset}\n                      onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, offset: parseInt(evt.target.value) }))}\n                    />\n                  </Form.Group>\n                </Form>\n              </Nav.Item>\n              <Nav.Item className=\"p-2\">\n                <Form>\n                  <Form.Group>\n                    <Form.Label>Limit:</Form.Label>\n                    <Form.Control\n                      required\n                      name=\"limit\"\n                      type=\"number\"\n                      value={filters.limit}\n                      onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, limit: parseInt(evt.target.value) }))}\n                    />\n                  </Form.Group>\n                </Form>\n              </Nav.Item>\n            </NavDropdown>\n            <NavDropdown className=\"retailers-dropdown\" title={filters.retailerId != \"\" ? getRetailerNameFromId(filters.retailerId) : 'Filter by retailer'} id='basic-nav-dropdown'>\n              <NavDropdown.Item onClick={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, retailerId: \"\" }))}>\n                None\n              </NavDropdown.Item>\n              {listRetailers}\n            </NavDropdown>\n            <Nav.Item>\n              <InputGroup>\n                <span className=\"nav-link\">Distance:</span>\n                <FormControl\n                  type=\"number\"\n                  className=\"distance-box\"\n                  value={filters.maxDistance}\n                  onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, maxDistance: parseInt(evt.target.value) }))}\n                  placeholder='Max distance'\n                />\n              </InputGroup>\n            </Nav.Item>\n            <Nav.Item className='ml-4'>\n              <Form className=\"nav-link\">\n                <Form.Check\n                  type='checkbox'\n                  id='exclude-expired'\n                  onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, excludeExpired: evt.target.checked ? 1 : 0 }))}\n                  label='Exclude expired'\n                />\n              </Form>\n            </Nav.Item>\n            <Nav.Item>\n              <Button variant=\"primary\" onClick={() => dispatch(fetchLeaflets(filters, true))}>Fetch from API</Button>{' '}\n\n            </Nav.Item>\n          </Nav>\n        </Navbar.Collapse>\n      </Container >\n    </Navbar >\n  );\n}\n\nexport default FiltersNavbar;\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport RootReducer from \"./reducers/rootReducer\";\r\n\r\nconst Store = createStore(\r\n    RootReducer,\r\n    applyMiddleware(thunk)\r\n)\r\n\r\nexport type RootState = ReturnType<typeof RootReducer>\r\n\r\nexport default Store","import { combineReducers } from \"redux\";\r\nimport leafletsReducer from \"./leafletsReducer\";\r\n\r\nconst RootReducer = combineReducers({\r\n    leafletsReducer: leafletsReducer\r\n});\r\n\r\nexport default RootReducer;\r\n\r\nexport type RootState = ReturnType<typeof RootReducer>;","import { ApiDispatchTypes, ActionType, InitialState } from \"../types/actionTypes\"\r\nconst initialState: InitialState = {\r\n    loading: false,\r\n    leaflets: [],\r\n    retailers: [],\r\n    filteredLeaflets: [],\r\n    filters: {\r\n        offset: 0,\r\n        limit: 30,\r\n        name: \"\",\r\n        retailerId: \"\",\r\n        excludeExpired: 0,\r\n        maxDistance: 0,\r\n        sort: \"priority,expTimestamp,distance,retailerName,leafletName\"\r\n    }\r\n};\r\n\r\nconst leafletsReducer = (state: InitialState = initialState, action: ApiDispatchTypes): InitialState => {\r\n    switch (action.type) {\r\n        case ActionType.FETCH_LEAFLETS_PENDING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case ActionType.FETCH_LEAFLETS_SUCCESS:\r\n            if (action.refresh) {\r\n                console.log(\"refreshing from API\");\r\n                return {\r\n                    ...state,\r\n                    loading: false,\r\n                    response: action.payload,\r\n                    filteredLeaflets: action.payload.data.leaflets,\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    loading: false,\r\n                    response: action.payload,\r\n                    retailers: action.retailers,\r\n                    leaflets: action.payload.data.leaflets,\r\n                    filteredLeaflets: action.payload.data.leaflets,\r\n                };\r\n            }\r\n\r\n        case ActionType.FETCH_LEAFLETS_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            };\r\n        case ActionType.FILTER_LEAFLETS:\r\n            return {\r\n                ...state,\r\n                filteredLeaflets: action.payload,\r\n                filters: action.filters\r\n            }\r\n        case ActionType.SORT_LEAFLETS:\r\n            return {\r\n                ...state,\r\n                filteredLeaflets: action.payload,\r\n                filters: action.filters\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default leafletsReducer\r\n"],"sourceRoot":""}