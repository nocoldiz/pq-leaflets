{"version":3,"sources":["webpack:///./src/actions/index.ts","webpack:///./src/types/actionTypes.ts","webpack:///./src/polyfills.ts","webpack:///./src/index.tsx","webpack:///./src/App.tsx","webpack:///./src/components/Leaflet/index.ts","webpack:///./src/components/Leaflet/Leaflet.tsx","webpack:///./src/components/FiltersNavbar/index.ts","webpack:///./src/components/FiltersNavbar/FiltersNavbar.tsx","webpack:///./src/store.ts","webpack:///./src/reducers/rootReducer.ts","webpack:///./src/reducers/leafletsReducer.ts"],"names":["fetchLeaflets","req","refresh","dispatch","type","ActionType","FETCH_LEAFLETS_PENDING","loading","get","baseUrl","params","offset","limit","name","excludeExpired","retailerId","maxDistance","sort","then","result","responseData","data","seen","Set","error","retailers","leaflets","forEach","item","push","id","retailer","filter","el","duplicate","has","add","FETCH_LEAFLETS_SUCCESS","payload","catch","console","FETCH_LEAFLETS_ERROR","filterLeaflets","filters","nameFilter","toUpperCase","retailerIdFilter","filteredLeaflets","indexOf","item3","item4","distance","slice","Date","log","d","setUTCSeconds","expTimestamp","getTime","FILTER_LEAFLETS","sortLeaflets","sortBy","activeSort","a","b","priority","SORT_LEAFLETS","render","Provider","store","document","getElementById","useDispatch","useSelector","state","leafletsReducer","useEffect","listItems","map","key","toString","xs","sm","md","xl","length","variant","default","props","timestamp","className","Img","src","images","lg","Item","toLocaleString","checkOrder","listRetailers","active","onClick","evt","as","sticky","bg","expand","Toggle","Collapse","Group","placeholder","onChange","target","value","title","Label","Control","required","parseInt","Check","checked","label","Store","createStore","applyMiddleware","RootReducer","combineReducers","initialState","action","response"],"mappings":"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","file":"js\\app.4927b34bb13e1904b6d4.min.js","sourcesContent":["import { Dispatch } from \"redux\"\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { ActionType, ApiDispatchTypes } from \"../types/actionTypes\"\r\nimport { LeafletsRequest, LeafletsResponse, LeafletItem, Retailer } from \"../types/dataTypes\"\r\nconst baseUrl = \"https://pq-leaflets.herokuapp.com\"\r\n\r\n\r\nexport const fetchLeaflets = (req: LeafletsRequest, refresh: boolean) => (dispatch: Dispatch<ApiDispatchTypes>) => {\r\n  dispatch({\r\n    type: ActionType.FETCH_LEAFLETS_PENDING,\r\n    loading: true\r\n  });\r\n  // Richiesta ad API\r\n  axios.get(`${baseUrl}/api/leaflets/filter`, {\r\n    params: {\r\n      offset: req.offset,\r\n      limit: req.limit,\r\n      name: req.name,\r\n      excludeExpired: req.excludeExpired,\r\n      retailerId: req.retailerId,\r\n      maxDistance: req.maxDistance,\r\n      sort: req.sort\r\n    }\r\n  }).then((result: AxiosResponse<LeafletsResponse>) => {\r\n    const responseData = result.data;\r\n    const seen = new Set();\r\n\r\n    if (responseData.data.error) {\r\n      throw (\"error\");\r\n    }\r\n    //Crea un array di retailers\r\n    let retailers: Array<Retailer> = [];\r\n    responseData.data.leaflets.forEach(item => {\r\n      retailers.push({ id: item.retailer.id, name: item.retailer.name });\r\n    });\r\n    //Verifica che non ci siano duplicati\r\n    retailers = retailers.filter(el => {\r\n      const duplicate = seen.has(el.id);\r\n      seen.add(el.id);\r\n      return !duplicate;\r\n    });\r\n\r\n    dispatch({\r\n      type: ActionType.FETCH_LEAFLETS_SUCCESS,\r\n      loading: false,\r\n      refresh: refresh,\r\n      retailers: retailers,\r\n      payload: responseData\r\n    });\r\n  }).catch((error) => {\r\n    console.error(error);\r\n    dispatch({\r\n      type: ActionType.FETCH_LEAFLETS_ERROR,\r\n      loading: false,\r\n      error: error\r\n    });\r\n  });\r\n};\r\n\r\n\r\n\r\nexport const filterLeaflets = (leaflets: Array<LeafletItem>, filters: LeafletsRequest) => (dispatch: Dispatch<ApiDispatchTypes>) => {\r\n  // Nota: la richiesta API è case sensitive, per comodità rendo il filtro locale non case sensitive\r\n  let nameFilter = filters.name.toUpperCase();\r\n  let retailerIdFilter = filters.retailerId;\r\n  //Controlla che filtri numerici non siano NaN\r\n  filters.maxDistance = filters.maxDistance || 0;\r\n  filters.offset = filters.offset || 0;\r\n  filters.limit = filters.limit || 0;\r\n\r\n  // Impedisce ad offset e limit di andare sotto 0\r\n  if (filters.maxDistance <= 0) { filters.maxDistance = 0 }\r\n  if (filters.offset <= 0) { filters.offset = 0 }\r\n  if (filters.limit <= 0) { filters.limit = 0 }\r\n\r\n  // Applica i vari filtri e poi limita l'array in base ad offset e limit\r\n  let filteredLeaflets = leaflets.filter(item => {\r\n    return ((item.name.toUpperCase().indexOf(nameFilter) >= 0) || (item.retailer.name.toUpperCase().indexOf(nameFilter) >= 0))\r\n  }).filter(item3 => {\r\n    return (retailerIdFilter != \"\" ? item3.retailer.id === retailerIdFilter : true)\r\n  }).filter(item4 => {\r\n    return (filters.maxDistance != 0 ? item4.retailer.distance <= filters.maxDistance : true)\r\n  }).slice(filters.offset, filters.limit);\r\n\r\n  // Nasconde i leaflets scaduta se opzione è abilitata\r\n  if (filters.excludeExpired == 1) {\r\n    const today = new Date();\r\n    console.log(\"filtering expired\")\r\n    filteredLeaflets = filteredLeaflets.filter(item => {\r\n      let d = new Date(0);\r\n      d.setUTCSeconds(item.expTimestamp);\r\n      return d.getTime() > today.getTime()\r\n    })\r\n  }\r\n  dispatch({\r\n    type: ActionType.FILTER_LEAFLETS,\r\n    filters: filters,\r\n    payload: filteredLeaflets\r\n  })\r\n};\r\n\r\n\r\nexport const sortLeaflets = (leaflets: Array<LeafletItem>, sortBy: string, filters: LeafletsRequest) => (dispatch: Dispatch<ApiDispatchTypes>) => {\r\n  let activeSort: string = filters.sort;\r\n  // Controlla algoritmo di sorting e lo applica all'array di leaflets\r\n  switch (sortBy) {\r\n    case \"priority\":\r\n      activeSort = \"priority\";\r\n      leaflets.sort((a, b) => (a.retailer.priority - b.retailer.priority));\r\n      break;\r\n    case \"-priority\":\r\n      activeSort = \"-priority\";\r\n      leaflets.sort((a, b) => (b.retailer.priority - a.retailer.priority));\r\n      break;\r\n    case \"expTimestamp\":\r\n      activeSort = \"expTimestamp\";\r\n      leaflets.sort((a, b) => (a.expTimestamp - b.expTimestamp));\r\n      break;\r\n    case \"-expTimestamp\":\r\n      activeSort = \"-expTimestamp\";\r\n      leaflets.sort((a, b) => (b.expTimestamp - a.expTimestamp));\r\n      break;\r\n    case \"distance\":\r\n      activeSort = \"distance\";\r\n      leaflets.sort((a, b) => (a.retailer.distance - b.retailer.distance));\r\n      break;\r\n    case \"-distance\":\r\n      activeSort = \"-distance\";\r\n      leaflets.sort((a, b) => (b.retailer.distance - a.retailer.distance));\r\n      break;\r\n    case \"retailerName\":\r\n      activeSort = \"retailerName\";\r\n      leaflets.sort((a, b) => (a.retailer.name < b.retailer.name ? -1 : 1));\r\n      break;\r\n    case \"-retailerName\":\r\n      activeSort = \"-retailerName\";\r\n      leaflets.sort((a, b) => (a.retailer.name > b.retailer.name ? -1 : 1));\r\n      break;\r\n    case \"leafletName\":\r\n      activeSort = \"leafletName\";\r\n      leaflets.sort((a, b) => (a.name < b.name ? -1 : 1));\r\n      break;\r\n    case \"-leafletName\":\r\n      activeSort = \"-leafletName\";\r\n      leaflets.sort((a, b) => (a.name > b.name ? -1 : 1));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  console.log(activeSort);\r\n\r\n\r\n  dispatch({\r\n    type: ActionType.SORT_LEAFLETS,\r\n    filters: {\r\n      ...filters, sort: activeSort\r\n    },\r\n    payload: leaflets\r\n  })\r\n};\r\n","\r\nimport { LeafletsResponse, LeafletsRequest, LeafletItem, Retailer } from \"./dataTypes\";\r\nexport enum ActionType {\r\n    FETCH_LEAFLETS_PENDING = \"fetch_leaflets_pending\",\r\n    FETCH_LEAFLETS_SUCCESS = \"fetch_leaflets_success\",\r\n    FETCH_LEAFLETS_ERROR = \"fetch_leaflets_error\",\r\n    FILTER_LEAFLETS = \"filter_Leaflets\",\r\n    FILTER_LEAFLETS_BY_NAME = \"filter_leaflets_by_name\",\r\n    FILTER_LEAFLETS_BY_EXPIRED = \"filter_leaflets_by_expired\",\r\n    FILTER_LEAFLETS_BY_RETAILER_ID = \"filter_leaflets_by_retailer_id\",\r\n    FILTER_LEAFLETS_BY_OFFSET_AND_LIMIT = \"filter_leaflets_by_offset_and_limit\",\r\n    FILTER_LEAFLETS_BY_DISTANCE = \"filter_leaflets_by_distance\",\r\n    SORT_LEAFLETS = \"sort_leaflets\"\r\n\r\n}\r\n\r\nexport interface InitialState {\r\n    loading: boolean,\r\n    leaflets: Array<LeafletItem>,\r\n    filteredLeaflets: Array<LeafletItem>,\r\n    retailers: Array<Retailer>,\r\n    response?: LeafletsResponse,\r\n    error?: string,\r\n    filters: LeafletsRequest\r\n}\r\ninterface FetchLeafletsPendingAction {\r\n    type: ActionType.FETCH_LEAFLETS_PENDING,\r\n    loading: boolean\r\n}\r\n\r\ninterface FetchLeafletsSuccessAction {\r\n    type: ActionType.FETCH_LEAFLETS_SUCCESS,\r\n    payload: LeafletsResponse,\r\n    retailers: Array<Retailer>,\r\n    loading: boolean,\r\n    refresh: boolean,\r\n}\r\n\r\ninterface FetchLeafletsErrorAction {\r\n    type: ActionType.FETCH_LEAFLETS_ERROR,\r\n    error: string,\r\n    loading: boolean\r\n}\r\ninterface FilterLeafletsAction {\r\n    type: ActionType.FILTER_LEAFLETS,\r\n    filters: LeafletsRequest,\r\n    payload: Array<LeafletItem>\r\n}\r\n\r\ninterface SortLeaflets {\r\n    type: ActionType.SORT_LEAFLETS,\r\n    filters: LeafletsRequest,\r\n    payload: Array<LeafletItem>\r\n}\r\n\r\n\r\nexport type ApiDispatchTypes = FetchLeafletsPendingAction | FetchLeafletsSuccessAction | FetchLeafletsErrorAction | FilterLeafletsAction | SortLeaflets;","/**\n * Import polyfills for Webpack config entry point.\n * @packageDocumentation\n */\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './scss/style.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"./store\";\r\nimport { fetchLeaflets } from \"./actions\";\r\nimport { LeafletItem } from \"./types/dataTypes\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Leaflet from './components/Leaflet';\r\nimport FiltersNavbar from './components/FiltersNavbar';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const filters = useSelector((state: RootState) => state.leafletsReducer.filters);\r\n  const leaflets = useSelector((state: RootState) => state.leafletsReducer.filteredLeaflets);\r\n  useEffect(() => {\r\n    dispatch(fetchLeaflets(filters, false))\r\n\r\n  }, []);\r\n\r\n  const listItems = leaflets.map((item: LeafletItem) =>\r\n    <Col key={item.id.toString()} xs={12} sm={6} md={6} xl={3}>\r\n      <Leaflet {...item}></Leaflet>\r\n    </Col>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <FiltersNavbar></FiltersNavbar>\r\n      <Container>\r\n        <Row>\r\n          {listItems}\r\n          {leaflets.length == 0 ? (<Alert variant=\"secondary\">\r\n            No leaflet found\r\n          </Alert>\r\n          ) : \"\"}\r\n\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export { default } from './Leaflet';\n","import React from 'react';\nimport './Leaflet.scss';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nimport { LeafletItem } from '../../types/dataTypes'\n\nconst Leaflet = (props: LeafletItem) => {\n    const convertTimestamp = (timestamp: number) => {\n        let d = new Date(0);\n        d.setUTCSeconds(timestamp);\n        return d.toLocaleString();\n    }\n\n    return (\n        <Card className=\"layout\">\n            <div className=\"card-x\">\n                <Card.Img variant=\"top\" src={props.retailer.images.lg} />\n            </div>\n            <ListGroup>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Name:</span>\n                    {props.name}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Retailer name:<br></br></span>\n                    {props.retailer.name}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Distance:</span>\n                    {props.retailer.distance}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Expiration:</span>\n                    {convertTimestamp(props.expTimestamp)}\n                </ListGroup.Item>\n                <ListGroup.Item>\n                    <span className=\"list-title\">Priority:</span>\n                    {props.retailer.priority}\n                </ListGroup.Item>\n            </ListGroup>\n        </Card >\n    );\n}\n\nexport default Leaflet;\n","export { default } from './FiltersNavbar';\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Form from 'react-bootstrap/Form';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Container from 'react-bootstrap/Container';\n\nimport Button from 'react-bootstrap/Button';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RootState } from '../../store';\nimport { fetchLeaflets, filterLeaflets, sortLeaflets } from \"../../actions\";\n\n\n\nimport './FiltersNavbar.scss';\nimport { Retailer } from '@src/types/dataTypes';\n\n\nconst FiltersNavbar = () => {\n\n\n  const dispatch = useDispatch();\n  const filters = useSelector((state: RootState) => state.leafletsReducer.filters);\n\n  const leaflets = useSelector((state: RootState) => state.leafletsReducer.leaflets);\n  const retailers = useSelector((state: RootState) => state.leafletsReducer.retailers);\n\n  // Initialize double slider\n\n\n  const getRetailerNameFromId = (id: string) => {\n    return retailers.filter(item => {\n      return (item.id == id)\n    })[0].name;\n  };\n  const checkOrder = (name: string) => {\n    return filters.sort.indexOf(name)\n  };\n\n  const listRetailers = retailers.map((item: Retailer) =>\n    <NavDropdown.Item\n      key={item.id}\n      active={item.id == filters.retailerId}\n      onClick={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, retailerId: item.id }))}\n      as=\"li\" >\n      {item.name}\n    </NavDropdown.Item >\n  );\n  return (\n    <Navbar sticky='top' bg='light' expand='lg'>\n      <Container>\n        <Navbar.Toggle aria-controls='basic-navbar-nav' />\n        <Navbar.Collapse id='basic-navbar-nav'>\n          <Nav className='m-auto'>\n            <Nav.Item>\n              <Form.Group>\n                <FormControl\n                  placeholder='Search name or retailer'\n                  aria-label='Search'\n                  onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, name: evt.target.value }))}\n                />\n              </Form.Group>\n            </Nav.Item>\n            <NavDropdown title='Sort by' id='basic-nav-dropdown'>\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-leafletName\") !== -1 ? \"leafletName\" : \"-leafletName\", filters))} >\n                <span className=\"pr-3\">{checkOrder(\"-leafletName\") !== -1 ? \"▼\" : \"▲\"}</span>\n                Leaflet name\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-retailerName\") !== -1 ? \"retailerName\" : \"-retailerName\", filters))} >\n                <span className=\"pr-3\">{checkOrder(\"-retailerName\") !== -1 ? \"▼\" : \"▲\"}</span>\n                Retailer name\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-distance\") !== -1 ? \"distance\" : \"-distance\", filters))} >\n                <span className=\"pr-3\">{checkOrder(\"-distance\") !== -1 ? \"▼\" : \"▲\"}</span>\n                Distance\n              </NavDropdown.Item>\n\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-expTimestamp\") !== -1 ? \"expTimestamp\" : \"-expTimestamp\", filters))} >\n                <span className=\"pr-3\">{checkOrder(\"-expTimestamp\") !== -1 ? \"▼\" : \"▲\"}</span>\n                ExpTimestamp\n              </NavDropdown.Item>\n              <NavDropdown.Item onClick={(evt) => dispatch(sortLeaflets(leaflets, checkOrder(\"-priority\") !== -1 ? \"priority\" : \"-priority\", filters))} >\n                <span className=\"mr-3\">{checkOrder(\"-priority\") !== -1 ? \"▼\" : \"▲\"}</span>\n                Priority\n              </NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown className=\"retailers-dropdown\" title={filters.retailerId != \"\" ? getRetailerNameFromId(filters.retailerId) : 'Filter by retailer'} id='basic-nav-dropdown'>\n              <NavDropdown.Item onClick={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, retailerId: \"\" }))}>\n                None\n              </NavDropdown.Item>\n              {listRetailers}\n            </NavDropdown>\n\n            <NavDropdown title='Set offset, limit and distance' id='basic-nav-dropdown'>\n              <Nav.Item className=\"p-2\">\n                <Form>\n                  <Form.Group>\n                    <Form.Label>Offset:</Form.Label>\n                    <Form.Control\n                      required\n                      name=\"offset\"\n                      type=\"number\"\n                      value={filters.offset}\n                      onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, offset: parseInt(evt.target.value) }))}\n                    />\n                  </Form.Group>\n                </Form>\n              </Nav.Item>\n              <Nav.Item className=\"p-2\">\n                <Form>\n                  <Form.Group>\n                    <Form.Label>Limit:</Form.Label>\n                    <Form.Control\n                      required\n                      name=\"limit\"\n                      type=\"number\"\n                      value={filters.limit}\n                      onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, limit: parseInt(evt.target.value) }))}\n                    />\n                  </Form.Group>\n                </Form>\n              </Nav.Item>\n              <Nav.Item className=\"p-2\">\n                <Form>\n                  <Form.Group>\n                    <Form.Label>Max distance:</Form.Label>\n                    <Form.Control\n                      required\n                      name=\"maxDistance\"\n                      type=\"number\"\n                      value={filters.maxDistance}\n                      onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, maxDistance: parseInt(evt.target.value) }))}\n                    />\n                  </Form.Group>\n                </Form>\n              </Nav.Item>\n            </NavDropdown>\n\n            <Nav.Item className='ml-4'>\n              <Form className=\"nav-link\">\n                <Form.Check\n                  type='checkbox'\n                  id='exclude-expired'\n                  onChange={(evt) => dispatch(filterLeaflets(leaflets, { ...filters, excludeExpired: evt.target.checked ? 1 : 0 }))}\n                  label='Exclude expired'\n                />\n              </Form>\n            </Nav.Item>\n            <Nav.Item>\n              <Button variant=\"primary\" onClick={() => dispatch(fetchLeaflets(filters, true))}>Filter from API</Button>{' '}\n\n            </Nav.Item>\n          </Nav>\n        </Navbar.Collapse>\n      </Container >\n    </Navbar >\n  );\n}\n\nexport default FiltersNavbar;\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport RootReducer from \"./reducers/rootReducer\";\r\n\r\nconst Store = createStore(\r\n    RootReducer,\r\n    applyMiddleware(thunk)\r\n)\r\n\r\nexport type RootState = ReturnType<typeof RootReducer>\r\n\r\nexport default Store","import { combineReducers } from \"redux\";\r\nimport leafletsReducer from \"./leafletsReducer\";\r\n\r\nconst RootReducer = combineReducers({\r\n    leafletsReducer: leafletsReducer\r\n});\r\n\r\nexport default RootReducer;\r\n\r\nexport type RootState = ReturnType<typeof RootReducer>;","import { ApiDispatchTypes, ActionType, InitialState } from \"../types/actionTypes\"\r\nconst initialState: InitialState = {\r\n    loading: false,\r\n    leaflets: [],\r\n    retailers: [],\r\n    filteredLeaflets: [],\r\n    filters: {\r\n        offset: 0,\r\n        limit: 30,\r\n        name: \"\",\r\n        retailerId: \"\",\r\n        excludeExpired: 0,\r\n        maxDistance: 0,\r\n        sort: \"priority\"\r\n    }\r\n};\r\n\r\nconst leafletsReducer = (state: InitialState = initialState, action: ApiDispatchTypes): InitialState => {\r\n    switch (action.type) {\r\n        case ActionType.FETCH_LEAFLETS_PENDING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case ActionType.FETCH_LEAFLETS_SUCCESS:\r\n            // Refresh evita che l'array di retailers venga sovrascritto\r\n            if (action.refresh) {\r\n                return {\r\n                    ...state,\r\n                    loading: false,\r\n                    response: action.payload,\r\n                    leaflets: action.payload.data.leaflets,\r\n                    filteredLeaflets: action.payload.data.leaflets,\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    loading: false,\r\n                    response: action.payload,\r\n                    retailers: action.retailers,\r\n                    leaflets: action.payload.data.leaflets,\r\n                    filteredLeaflets: action.payload.data.leaflets,\r\n                };\r\n            }\r\n\r\n        case ActionType.FETCH_LEAFLETS_ERROR:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            };\r\n        case ActionType.FILTER_LEAFLETS:\r\n            return {\r\n                ...state,\r\n                filteredLeaflets: action.payload,\r\n                filters: action.filters\r\n            }\r\n        case ActionType.SORT_LEAFLETS:\r\n            return {\r\n                ...state,\r\n                filteredLeaflets: action.payload,\r\n                filters: action.filters\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default leafletsReducer\r\n"],"sourceRoot":""}